//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NCRVisual.web.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'ref_country_indicator' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class ref_country_indicator : Entity
    {
        
        private Nullable<int> _country_id;
        
        private int _country_indicator_id_pk;
        
        private Nullable<float> _country_indicator_value;
        
        private Nullable<int> _country_indicator_year;
        
        private Nullable<int> _indicator_id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Oncountry_idChanging(Nullable<int> value);
        partial void Oncountry_idChanged();
        partial void Oncountry_indicator_id_pkChanging(int value);
        partial void Oncountry_indicator_id_pkChanged();
        partial void Oncountry_indicator_valueChanging(Nullable<float> value);
        partial void Oncountry_indicator_valueChanged();
        partial void Oncountry_indicator_yearChanging(Nullable<int> value);
        partial void Oncountry_indicator_yearChanged();
        partial void Onindicator_idChanging(Nullable<int> value);
        partial void Onindicator_idChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ref_country_indicator"/> class.
        /// </summary>
        public ref_country_indicator()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'country_id' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> country_id
        {
            get
            {
                return this._country_id;
            }
            set
            {
                if ((this._country_id != value))
                {
                    this.Oncountry_idChanging(value);
                    this.RaiseDataMemberChanging("country_id");
                    this.ValidateProperty("country_id", value);
                    this._country_id = value;
                    this.RaiseDataMemberChanged("country_id");
                    this.Oncountry_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_indicator_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int country_indicator_id_pk
        {
            get
            {
                return this._country_indicator_id_pk;
            }
            set
            {
                if ((this._country_indicator_id_pk != value))
                {
                    this.Oncountry_indicator_id_pkChanging(value);
                    this.ValidateProperty("country_indicator_id_pk", value);
                    this._country_indicator_id_pk = value;
                    this.RaisePropertyChanged("country_indicator_id_pk");
                    this.Oncountry_indicator_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_indicator_value' value.
        /// </summary>
        [DataMember()]
        public Nullable<float> country_indicator_value
        {
            get
            {
                return this._country_indicator_value;
            }
            set
            {
                if ((this._country_indicator_value != value))
                {
                    this.Oncountry_indicator_valueChanging(value);
                    this.RaiseDataMemberChanging("country_indicator_value");
                    this.ValidateProperty("country_indicator_value", value);
                    this._country_indicator_value = value;
                    this.RaiseDataMemberChanged("country_indicator_value");
                    this.Oncountry_indicator_valueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_indicator_year' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> country_indicator_year
        {
            get
            {
                return this._country_indicator_year;
            }
            set
            {
                if ((this._country_indicator_year != value))
                {
                    this.Oncountry_indicator_yearChanging(value);
                    this.RaiseDataMemberChanging("country_indicator_year");
                    this.ValidateProperty("country_indicator_year", value);
                    this._country_indicator_year = value;
                    this.RaiseDataMemberChanged("country_indicator_year");
                    this.Oncountry_indicator_yearChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_id' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> indicator_id
        {
            get
            {
                return this._indicator_id;
            }
            set
            {
                if ((this._indicator_id != value))
                {
                    this.Onindicator_idChanging(value);
                    this.RaiseDataMemberChanging("indicator_id");
                    this.ValidateProperty("indicator_id", value);
                    this._indicator_id = value;
                    this.RaiseDataMemberChanged("indicator_id");
                    this.Onindicator_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._country_indicator_id_pk;
        }
    }
    
    /// <summary>
    /// The 'ref_tab_indicator' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class ref_tab_indicator : Entity
    {
        
        private Nullable<int> _indicator_id;
        
        private Nullable<int> _tab_id;
        
        private int _tab_indicator_id_pk;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onindicator_idChanging(Nullable<int> value);
        partial void Onindicator_idChanged();
        partial void Ontab_idChanging(Nullable<int> value);
        partial void Ontab_idChanged();
        partial void Ontab_indicator_id_pkChanging(int value);
        partial void Ontab_indicator_id_pkChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ref_tab_indicator"/> class.
        /// </summary>
        public ref_tab_indicator()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_id' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> indicator_id
        {
            get
            {
                return this._indicator_id;
            }
            set
            {
                if ((this._indicator_id != value))
                {
                    this.Onindicator_idChanging(value);
                    this.RaiseDataMemberChanging("indicator_id");
                    this.ValidateProperty("indicator_id", value);
                    this._indicator_id = value;
                    this.RaiseDataMemberChanged("indicator_id");
                    this.Onindicator_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'tab_id' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> tab_id
        {
            get
            {
                return this._tab_id;
            }
            set
            {
                if ((this._tab_id != value))
                {
                    this.Ontab_idChanging(value);
                    this.RaiseDataMemberChanging("tab_id");
                    this.ValidateProperty("tab_id", value);
                    this._tab_id = value;
                    this.RaiseDataMemberChanged("tab_id");
                    this.Ontab_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'tab_indicator_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int tab_indicator_id_pk
        {
            get
            {
                return this._tab_indicator_id_pk;
            }
            set
            {
                if ((this._tab_indicator_id_pk != value))
                {
                    this.Ontab_indicator_id_pkChanging(value);
                    this.ValidateProperty("tab_indicator_id_pk", value);
                    this._tab_indicator_id_pk = value;
                    this.RaisePropertyChanged("tab_indicator_id_pk");
                    this.Ontab_indicator_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._tab_indicator_id_pk;
        }
    }
    
    /// <summary>
    /// The 'tbl_countries' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class tbl_countries : Entity
    {
        
        private Nullable<int> _country_code;
        
        private int _country_id_pk;
        
        private string _country_iso_code;
        
        private Nullable<decimal> _country_latitude;
        
        private Nullable<decimal> _country_longitude;
        
        private string _country_name;
        
        private Nullable<bool> _has_flag;
        
        private string _income_level_id;
        
        private Nullable<bool> _is_region;
        
        private string _lending_type_id;
        
        private string _region_id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Oncountry_codeChanging(Nullable<int> value);
        partial void Oncountry_codeChanged();
        partial void Oncountry_id_pkChanging(int value);
        partial void Oncountry_id_pkChanged();
        partial void Oncountry_iso_codeChanging(string value);
        partial void Oncountry_iso_codeChanged();
        partial void Oncountry_latitudeChanging(Nullable<decimal> value);
        partial void Oncountry_latitudeChanged();
        partial void Oncountry_longitudeChanging(Nullable<decimal> value);
        partial void Oncountry_longitudeChanged();
        partial void Oncountry_nameChanging(string value);
        partial void Oncountry_nameChanged();
        partial void Onhas_flagChanging(Nullable<bool> value);
        partial void Onhas_flagChanged();
        partial void Onincome_level_idChanging(string value);
        partial void Onincome_level_idChanged();
        partial void Onis_regionChanging(Nullable<bool> value);
        partial void Onis_regionChanged();
        partial void Onlending_type_idChanging(string value);
        partial void Onlending_type_idChanged();
        partial void Onregion_idChanging(string value);
        partial void Onregion_idChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="tbl_countries"/> class.
        /// </summary>
        public tbl_countries()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'country_code' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> country_code
        {
            get
            {
                return this._country_code;
            }
            set
            {
                if ((this._country_code != value))
                {
                    this.Oncountry_codeChanging(value);
                    this.RaiseDataMemberChanging("country_code");
                    this.ValidateProperty("country_code", value);
                    this._country_code = value;
                    this.RaiseDataMemberChanged("country_code");
                    this.Oncountry_codeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int country_id_pk
        {
            get
            {
                return this._country_id_pk;
            }
            set
            {
                if ((this._country_id_pk != value))
                {
                    this.Oncountry_id_pkChanging(value);
                    this.ValidateProperty("country_id_pk", value);
                    this._country_id_pk = value;
                    this.RaisePropertyChanged("country_id_pk");
                    this.Oncountry_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_iso_code' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string country_iso_code
        {
            get
            {
                return this._country_iso_code;
            }
            set
            {
                if ((this._country_iso_code != value))
                {
                    this.Oncountry_iso_codeChanging(value);
                    this.RaiseDataMemberChanging("country_iso_code");
                    this.ValidateProperty("country_iso_code", value);
                    this._country_iso_code = value;
                    this.RaiseDataMemberChanged("country_iso_code");
                    this.Oncountry_iso_codeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_latitude' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> country_latitude
        {
            get
            {
                return this._country_latitude;
            }
            set
            {
                if ((this._country_latitude != value))
                {
                    this.Oncountry_latitudeChanging(value);
                    this.RaiseDataMemberChanging("country_latitude");
                    this.ValidateProperty("country_latitude", value);
                    this._country_latitude = value;
                    this.RaiseDataMemberChanged("country_latitude");
                    this.Oncountry_latitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_longitude' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> country_longitude
        {
            get
            {
                return this._country_longitude;
            }
            set
            {
                if ((this._country_longitude != value))
                {
                    this.Oncountry_longitudeChanging(value);
                    this.RaiseDataMemberChanging("country_longitude");
                    this.ValidateProperty("country_longitude", value);
                    this._country_longitude = value;
                    this.RaiseDataMemberChanged("country_longitude");
                    this.Oncountry_longitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string country_name
        {
            get
            {
                return this._country_name;
            }
            set
            {
                if ((this._country_name != value))
                {
                    this.Oncountry_nameChanging(value);
                    this.RaiseDataMemberChanging("country_name");
                    this.ValidateProperty("country_name", value);
                    this._country_name = value;
                    this.RaiseDataMemberChanged("country_name");
                    this.Oncountry_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'has_flag' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> has_flag
        {
            get
            {
                return this._has_flag;
            }
            set
            {
                if ((this._has_flag != value))
                {
                    this.Onhas_flagChanging(value);
                    this.RaiseDataMemberChanging("has_flag");
                    this.ValidateProperty("has_flag", value);
                    this._has_flag = value;
                    this.RaiseDataMemberChanged("has_flag");
                    this.Onhas_flagChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'income_level_id' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string income_level_id
        {
            get
            {
                return this._income_level_id;
            }
            set
            {
                if ((this._income_level_id != value))
                {
                    this.Onincome_level_idChanging(value);
                    this.RaiseDataMemberChanging("income_level_id");
                    this.ValidateProperty("income_level_id", value);
                    this._income_level_id = value;
                    this.RaiseDataMemberChanged("income_level_id");
                    this.Onincome_level_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_region' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> is_region
        {
            get
            {
                return this._is_region;
            }
            set
            {
                if ((this._is_region != value))
                {
                    this.Onis_regionChanging(value);
                    this.RaiseDataMemberChanging("is_region");
                    this.ValidateProperty("is_region", value);
                    this._is_region = value;
                    this.RaiseDataMemberChanged("is_region");
                    this.Onis_regionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'lending_type_id' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string lending_type_id
        {
            get
            {
                return this._lending_type_id;
            }
            set
            {
                if ((this._lending_type_id != value))
                {
                    this.Onlending_type_idChanging(value);
                    this.RaiseDataMemberChanging("lending_type_id");
                    this.ValidateProperty("lending_type_id", value);
                    this._lending_type_id = value;
                    this.RaiseDataMemberChanged("lending_type_id");
                    this.Onlending_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'region_id' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string region_id
        {
            get
            {
                return this._region_id;
            }
            set
            {
                if ((this._region_id != value))
                {
                    this.Onregion_idChanging(value);
                    this.RaiseDataMemberChanging("region_id");
                    this.ValidateProperty("region_id", value);
                    this._region_id = value;
                    this.RaiseDataMemberChanged("region_id");
                    this.Onregion_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._country_id_pk;
        }
    }
    
    /// <summary>
    /// The 'tbl_income_levels' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class tbl_income_levels : Entity
    {
        
        private string _income_level_id_pk;
        
        private string _income_level_name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onincome_level_id_pkChanging(string value);
        partial void Onincome_level_id_pkChanged();
        partial void Onincome_level_nameChanging(string value);
        partial void Onincome_level_nameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="tbl_income_levels"/> class.
        /// </summary>
        public tbl_income_levels()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'income_level_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(10)]
        public string income_level_id_pk
        {
            get
            {
                return this._income_level_id_pk;
            }
            set
            {
                if ((this._income_level_id_pk != value))
                {
                    this.Onincome_level_id_pkChanging(value);
                    this.ValidateProperty("income_level_id_pk", value);
                    this._income_level_id_pk = value;
                    this.RaisePropertyChanged("income_level_id_pk");
                    this.Onincome_level_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'income_level_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string income_level_name
        {
            get
            {
                return this._income_level_name;
            }
            set
            {
                if ((this._income_level_name != value))
                {
                    this.Onincome_level_nameChanging(value);
                    this.RaiseDataMemberChanging("income_level_name");
                    this.ValidateProperty("income_level_name", value);
                    this._income_level_name = value;
                    this.RaiseDataMemberChanged("income_level_name");
                    this.Onincome_level_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._income_level_id_pk;
        }
    }
    
    /// <summary>
    /// The 'tbl_indicators' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class tbl_indicators : Entity
    {
        
        private string _indicator_code;
        
        private string _indicator_description;
        
        private int _indicator_id_pk;
        
        private string _indicator_name;
        
        private string _indicator_unit;
        
        private Nullable<bool> _is_gotten;
        
        private Nullable<bool> _is_yearly;
        
        private Nullable<int> _last_update;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onindicator_codeChanging(string value);
        partial void Onindicator_codeChanged();
        partial void Onindicator_descriptionChanging(string value);
        partial void Onindicator_descriptionChanged();
        partial void Onindicator_id_pkChanging(int value);
        partial void Onindicator_id_pkChanged();
        partial void Onindicator_nameChanging(string value);
        partial void Onindicator_nameChanged();
        partial void Onindicator_unitChanging(string value);
        partial void Onindicator_unitChanged();
        partial void Onis_gottenChanging(Nullable<bool> value);
        partial void Onis_gottenChanged();
        partial void Onis_yearlyChanging(Nullable<bool> value);
        partial void Onis_yearlyChanged();
        partial void Onlast_updateChanging(Nullable<int> value);
        partial void Onlast_updateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="tbl_indicators"/> class.
        /// </summary>
        public tbl_indicators()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_code' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string indicator_code
        {
            get
            {
                return this._indicator_code;
            }
            set
            {
                if ((this._indicator_code != value))
                {
                    this.Onindicator_codeChanging(value);
                    this.RaiseDataMemberChanging("indicator_code");
                    this.ValidateProperty("indicator_code", value);
                    this._indicator_code = value;
                    this.RaiseDataMemberChanged("indicator_code");
                    this.Onindicator_codeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_description' value.
        /// </summary>
        [DataMember()]
        public string indicator_description
        {
            get
            {
                return this._indicator_description;
            }
            set
            {
                if ((this._indicator_description != value))
                {
                    this.Onindicator_descriptionChanging(value);
                    this.RaiseDataMemberChanging("indicator_description");
                    this.ValidateProperty("indicator_description", value);
                    this._indicator_description = value;
                    this.RaiseDataMemberChanged("indicator_description");
                    this.Onindicator_descriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int indicator_id_pk
        {
            get
            {
                return this._indicator_id_pk;
            }
            set
            {
                if ((this._indicator_id_pk != value))
                {
                    this.Onindicator_id_pkChanging(value);
                    this.ValidateProperty("indicator_id_pk", value);
                    this._indicator_id_pk = value;
                    this.RaisePropertyChanged("indicator_id_pk");
                    this.Onindicator_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string indicator_name
        {
            get
            {
                return this._indicator_name;
            }
            set
            {
                if ((this._indicator_name != value))
                {
                    this.Onindicator_nameChanging(value);
                    this.RaiseDataMemberChanging("indicator_name");
                    this.ValidateProperty("indicator_name", value);
                    this._indicator_name = value;
                    this.RaiseDataMemberChanged("indicator_name");
                    this.Onindicator_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_unit' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string indicator_unit
        {
            get
            {
                return this._indicator_unit;
            }
            set
            {
                if ((this._indicator_unit != value))
                {
                    this.Onindicator_unitChanging(value);
                    this.RaiseDataMemberChanging("indicator_unit");
                    this.ValidateProperty("indicator_unit", value);
                    this._indicator_unit = value;
                    this.RaiseDataMemberChanged("indicator_unit");
                    this.Onindicator_unitChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_gotten' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> is_gotten
        {
            get
            {
                return this._is_gotten;
            }
            set
            {
                if ((this._is_gotten != value))
                {
                    this.Onis_gottenChanging(value);
                    this.RaiseDataMemberChanging("is_gotten");
                    this.ValidateProperty("is_gotten", value);
                    this._is_gotten = value;
                    this.RaiseDataMemberChanged("is_gotten");
                    this.Onis_gottenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_yearly' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> is_yearly
        {
            get
            {
                return this._is_yearly;
            }
            set
            {
                if ((this._is_yearly != value))
                {
                    this.Onis_yearlyChanging(value);
                    this.RaiseDataMemberChanging("is_yearly");
                    this.ValidateProperty("is_yearly", value);
                    this._is_yearly = value;
                    this.RaiseDataMemberChanged("is_yearly");
                    this.Onis_yearlyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'last_update' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> last_update
        {
            get
            {
                return this._last_update;
            }
            set
            {
                if ((this._last_update != value))
                {
                    this.Onlast_updateChanging(value);
                    this.RaiseDataMemberChanging("last_update");
                    this.ValidateProperty("last_update", value);
                    this._last_update = value;
                    this.RaiseDataMemberChanged("last_update");
                    this.Onlast_updateChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._indicator_id_pk;
        }
    }
    
    /// <summary>
    /// The 'tbl_lending_types' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class tbl_lending_types : Entity
    {
        
        private string _lending_type_id_pk;
        
        private string _lending_type_name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onlending_type_id_pkChanging(string value);
        partial void Onlending_type_id_pkChanged();
        partial void Onlending_type_nameChanging(string value);
        partial void Onlending_type_nameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="tbl_lending_types"/> class.
        /// </summary>
        public tbl_lending_types()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'lending_type_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(10)]
        public string lending_type_id_pk
        {
            get
            {
                return this._lending_type_id_pk;
            }
            set
            {
                if ((this._lending_type_id_pk != value))
                {
                    this.Onlending_type_id_pkChanging(value);
                    this.ValidateProperty("lending_type_id_pk", value);
                    this._lending_type_id_pk = value;
                    this.RaisePropertyChanged("lending_type_id_pk");
                    this.Onlending_type_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'lending_type_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string lending_type_name
        {
            get
            {
                return this._lending_type_name;
            }
            set
            {
                if ((this._lending_type_name != value))
                {
                    this.Onlending_type_nameChanging(value);
                    this.RaiseDataMemberChanging("lending_type_name");
                    this.ValidateProperty("lending_type_name", value);
                    this._lending_type_name = value;
                    this.RaiseDataMemberChanged("lending_type_name");
                    this.Onlending_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._lending_type_id_pk;
        }
    }
    
    /// <summary>
    /// The 'tbl_projects' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class tbl_projects : Entity
    {
        
        private Nullable<int> _country_id;
        
        private string _project_approval_date;
        
        private string _project_borrower;
        
        private string _project_close_date;
        
        private string _project_cost;
        
        private int _project_id_pk;
        
        private string _project_implement_agency;
        
        private string _project_link;
        
        private string _project_major_sector;
        
        private string _project_name;
        
        private string _project_outcome;
        
        private string _project_region;
        
        private string _project_status;
        
        private string _project_themes;
        
        private string _project_wb_id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Oncountry_idChanging(Nullable<int> value);
        partial void Oncountry_idChanged();
        partial void Onproject_approval_dateChanging(string value);
        partial void Onproject_approval_dateChanged();
        partial void Onproject_borrowerChanging(string value);
        partial void Onproject_borrowerChanged();
        partial void Onproject_close_dateChanging(string value);
        partial void Onproject_close_dateChanged();
        partial void Onproject_costChanging(string value);
        partial void Onproject_costChanged();
        partial void Onproject_id_pkChanging(int value);
        partial void Onproject_id_pkChanged();
        partial void Onproject_implement_agencyChanging(string value);
        partial void Onproject_implement_agencyChanged();
        partial void Onproject_linkChanging(string value);
        partial void Onproject_linkChanged();
        partial void Onproject_major_sectorChanging(string value);
        partial void Onproject_major_sectorChanged();
        partial void Onproject_nameChanging(string value);
        partial void Onproject_nameChanged();
        partial void Onproject_outcomeChanging(string value);
        partial void Onproject_outcomeChanged();
        partial void Onproject_regionChanging(string value);
        partial void Onproject_regionChanged();
        partial void Onproject_statusChanging(string value);
        partial void Onproject_statusChanged();
        partial void Onproject_themesChanging(string value);
        partial void Onproject_themesChanged();
        partial void Onproject_wb_idChanging(string value);
        partial void Onproject_wb_idChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="tbl_projects"/> class.
        /// </summary>
        public tbl_projects()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'country_id' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> country_id
        {
            get
            {
                return this._country_id;
            }
            set
            {
                if ((this._country_id != value))
                {
                    this.Oncountry_idChanging(value);
                    this.RaiseDataMemberChanging("country_id");
                    this.ValidateProperty("country_id", value);
                    this._country_id = value;
                    this.RaiseDataMemberChanged("country_id");
                    this.Oncountry_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_approval_date' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string project_approval_date
        {
            get
            {
                return this._project_approval_date;
            }
            set
            {
                if ((this._project_approval_date != value))
                {
                    this.Onproject_approval_dateChanging(value);
                    this.RaiseDataMemberChanging("project_approval_date");
                    this.ValidateProperty("project_approval_date", value);
                    this._project_approval_date = value;
                    this.RaiseDataMemberChanged("project_approval_date");
                    this.Onproject_approval_dateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_borrower' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string project_borrower
        {
            get
            {
                return this._project_borrower;
            }
            set
            {
                if ((this._project_borrower != value))
                {
                    this.Onproject_borrowerChanging(value);
                    this.RaiseDataMemberChanging("project_borrower");
                    this.ValidateProperty("project_borrower", value);
                    this._project_borrower = value;
                    this.RaiseDataMemberChanged("project_borrower");
                    this.Onproject_borrowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_close_date' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string project_close_date
        {
            get
            {
                return this._project_close_date;
            }
            set
            {
                if ((this._project_close_date != value))
                {
                    this.Onproject_close_dateChanging(value);
                    this.RaiseDataMemberChanging("project_close_date");
                    this.ValidateProperty("project_close_date", value);
                    this._project_close_date = value;
                    this.RaiseDataMemberChanged("project_close_date");
                    this.Onproject_close_dateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_cost' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string project_cost
        {
            get
            {
                return this._project_cost;
            }
            set
            {
                if ((this._project_cost != value))
                {
                    this.Onproject_costChanging(value);
                    this.RaiseDataMemberChanging("project_cost");
                    this.ValidateProperty("project_cost", value);
                    this._project_cost = value;
                    this.RaiseDataMemberChanged("project_cost");
                    this.Onproject_costChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int project_id_pk
        {
            get
            {
                return this._project_id_pk;
            }
            set
            {
                if ((this._project_id_pk != value))
                {
                    this.Onproject_id_pkChanging(value);
                    this.ValidateProperty("project_id_pk", value);
                    this._project_id_pk = value;
                    this.RaisePropertyChanged("project_id_pk");
                    this.Onproject_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_implement_agency' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string project_implement_agency
        {
            get
            {
                return this._project_implement_agency;
            }
            set
            {
                if ((this._project_implement_agency != value))
                {
                    this.Onproject_implement_agencyChanging(value);
                    this.RaiseDataMemberChanging("project_implement_agency");
                    this.ValidateProperty("project_implement_agency", value);
                    this._project_implement_agency = value;
                    this.RaiseDataMemberChanged("project_implement_agency");
                    this.Onproject_implement_agencyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_link' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string project_link
        {
            get
            {
                return this._project_link;
            }
            set
            {
                if ((this._project_link != value))
                {
                    this.Onproject_linkChanging(value);
                    this.RaiseDataMemberChanging("project_link");
                    this.ValidateProperty("project_link", value);
                    this._project_link = value;
                    this.RaiseDataMemberChanged("project_link");
                    this.Onproject_linkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_major_sector' value.
        /// </summary>
        [DataMember()]
        public string project_major_sector
        {
            get
            {
                return this._project_major_sector;
            }
            set
            {
                if ((this._project_major_sector != value))
                {
                    this.Onproject_major_sectorChanging(value);
                    this.RaiseDataMemberChanging("project_major_sector");
                    this.ValidateProperty("project_major_sector", value);
                    this._project_major_sector = value;
                    this.RaiseDataMemberChanged("project_major_sector");
                    this.Onproject_major_sectorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string project_name
        {
            get
            {
                return this._project_name;
            }
            set
            {
                if ((this._project_name != value))
                {
                    this.Onproject_nameChanging(value);
                    this.RaiseDataMemberChanging("project_name");
                    this.ValidateProperty("project_name", value);
                    this._project_name = value;
                    this.RaiseDataMemberChanged("project_name");
                    this.Onproject_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_outcome' value.
        /// </summary>
        [DataMember()]
        public string project_outcome
        {
            get
            {
                return this._project_outcome;
            }
            set
            {
                if ((this._project_outcome != value))
                {
                    this.Onproject_outcomeChanging(value);
                    this.RaiseDataMemberChanging("project_outcome");
                    this.ValidateProperty("project_outcome", value);
                    this._project_outcome = value;
                    this.RaiseDataMemberChanged("project_outcome");
                    this.Onproject_outcomeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_region' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string project_region
        {
            get
            {
                return this._project_region;
            }
            set
            {
                if ((this._project_region != value))
                {
                    this.Onproject_regionChanging(value);
                    this.RaiseDataMemberChanging("project_region");
                    this.ValidateProperty("project_region", value);
                    this._project_region = value;
                    this.RaiseDataMemberChanged("project_region");
                    this.Onproject_regionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_status' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string project_status
        {
            get
            {
                return this._project_status;
            }
            set
            {
                if ((this._project_status != value))
                {
                    this.Onproject_statusChanging(value);
                    this.RaiseDataMemberChanging("project_status");
                    this.ValidateProperty("project_status", value);
                    this._project_status = value;
                    this.RaiseDataMemberChanged("project_status");
                    this.Onproject_statusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_themes' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string project_themes
        {
            get
            {
                return this._project_themes;
            }
            set
            {
                if ((this._project_themes != value))
                {
                    this.Onproject_themesChanging(value);
                    this.RaiseDataMemberChanging("project_themes");
                    this.ValidateProperty("project_themes", value);
                    this._project_themes = value;
                    this.RaiseDataMemberChanged("project_themes");
                    this.Onproject_themesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'project_wb_id' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string project_wb_id
        {
            get
            {
                return this._project_wb_id;
            }
            set
            {
                if ((this._project_wb_id != value))
                {
                    this.Onproject_wb_idChanging(value);
                    this.RaiseDataMemberChanging("project_wb_id");
                    this.ValidateProperty("project_wb_id", value);
                    this._project_wb_id = value;
                    this.RaiseDataMemberChanged("project_wb_id");
                    this.Onproject_wb_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._project_id_pk;
        }
    }
    
    /// <summary>
    /// The 'tbl_regions' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class tbl_regions : Entity
    {
        
        private string _region_id_pk;
        
        private string _region_name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onregion_id_pkChanging(string value);
        partial void Onregion_id_pkChanged();
        partial void Onregion_nameChanging(string value);
        partial void Onregion_nameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="tbl_regions"/> class.
        /// </summary>
        public tbl_regions()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'region_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(10)]
        public string region_id_pk
        {
            get
            {
                return this._region_id_pk;
            }
            set
            {
                if ((this._region_id_pk != value))
                {
                    this.Onregion_id_pkChanging(value);
                    this.ValidateProperty("region_id_pk", value);
                    this._region_id_pk = value;
                    this.RaisePropertyChanged("region_id_pk");
                    this.Onregion_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'region_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string region_name
        {
            get
            {
                return this._region_name;
            }
            set
            {
                if ((this._region_name != value))
                {
                    this.Onregion_nameChanging(value);
                    this.RaiseDataMemberChanging("region_name");
                    this.ValidateProperty("region_name", value);
                    this._region_name = value;
                    this.RaiseDataMemberChanged("region_name");
                    this.Onregion_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._region_id_pk;
        }
    }
    
    /// <summary>
    /// The 'tbl_tabs' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class tbl_tabs : Entity
    {
        
        private int _tab_id_pk;
        
        private string _tab_name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Ontab_id_pkChanging(int value);
        partial void Ontab_id_pkChanged();
        partial void Ontab_nameChanging(string value);
        partial void Ontab_nameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="tbl_tabs"/> class.
        /// </summary>
        public tbl_tabs()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'tab_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int tab_id_pk
        {
            get
            {
                return this._tab_id_pk;
            }
            set
            {
                if ((this._tab_id_pk != value))
                {
                    this.Ontab_id_pkChanging(value);
                    this.ValidateProperty("tab_id_pk", value);
                    this._tab_id_pk = value;
                    this.RaisePropertyChanged("tab_id_pk");
                    this.Ontab_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'tab_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string tab_name
        {
            get
            {
                return this._tab_name;
            }
            set
            {
                if ((this._tab_name != value))
                {
                    this.Ontab_nameChanging(value);
                    this.RaiseDataMemberChanging("tab_name");
                    this.ValidateProperty("tab_name", value);
                    this._tab_name = value;
                    this.RaiseDataMemberChanged("tab_name");
                    this.Ontab_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._tab_id_pk;
        }
    }
    
    /// <summary>
    /// The 'tbl_trades' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class tbl_trades : Entity
    {
        
        private Nullable<int> _country_from_id;
        
        private Nullable<int> _country_to_id;
        
        private Nullable<decimal> _export_value;
        
        private Nullable<decimal> _import_value;
        
        private int _trade_id_pk;
        
        private Nullable<int> _trade_year;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Oncountry_from_idChanging(Nullable<int> value);
        partial void Oncountry_from_idChanged();
        partial void Oncountry_to_idChanging(Nullable<int> value);
        partial void Oncountry_to_idChanged();
        partial void Onexport_valueChanging(Nullable<decimal> value);
        partial void Onexport_valueChanged();
        partial void Onimport_valueChanging(Nullable<decimal> value);
        partial void Onimport_valueChanged();
        partial void Ontrade_id_pkChanging(int value);
        partial void Ontrade_id_pkChanged();
        partial void Ontrade_yearChanging(Nullable<int> value);
        partial void Ontrade_yearChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="tbl_trades"/> class.
        /// </summary>
        public tbl_trades()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'country_from_id' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> country_from_id
        {
            get
            {
                return this._country_from_id;
            }
            set
            {
                if ((this._country_from_id != value))
                {
                    this.Oncountry_from_idChanging(value);
                    this.RaiseDataMemberChanging("country_from_id");
                    this.ValidateProperty("country_from_id", value);
                    this._country_from_id = value;
                    this.RaiseDataMemberChanged("country_from_id");
                    this.Oncountry_from_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_to_id' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> country_to_id
        {
            get
            {
                return this._country_to_id;
            }
            set
            {
                if ((this._country_to_id != value))
                {
                    this.Oncountry_to_idChanging(value);
                    this.RaiseDataMemberChanging("country_to_id");
                    this.ValidateProperty("country_to_id", value);
                    this._country_to_id = value;
                    this.RaiseDataMemberChanged("country_to_id");
                    this.Oncountry_to_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'export_value' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> export_value
        {
            get
            {
                return this._export_value;
            }
            set
            {
                if ((this._export_value != value))
                {
                    this.Onexport_valueChanging(value);
                    this.RaiseDataMemberChanging("export_value");
                    this.ValidateProperty("export_value", value);
                    this._export_value = value;
                    this.RaiseDataMemberChanged("export_value");
                    this.Onexport_valueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'import_value' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> import_value
        {
            get
            {
                return this._import_value;
            }
            set
            {
                if ((this._import_value != value))
                {
                    this.Onimport_valueChanging(value);
                    this.RaiseDataMemberChanging("import_value");
                    this.ValidateProperty("import_value", value);
                    this._import_value = value;
                    this.RaiseDataMemberChanged("import_value");
                    this.Onimport_valueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'trade_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int trade_id_pk
        {
            get
            {
                return this._trade_id_pk;
            }
            set
            {
                if ((this._trade_id_pk != value))
                {
                    this.Ontrade_id_pkChanging(value);
                    this.ValidateProperty("trade_id_pk", value);
                    this._trade_id_pk = value;
                    this.RaisePropertyChanged("trade_id_pk");
                    this.Ontrade_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'trade_year' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> trade_year
        {
            get
            {
                return this._trade_year;
            }
            set
            {
                if ((this._trade_year != value))
                {
                    this.Ontrade_yearChanging(value);
                    this.RaiseDataMemberChanging("trade_year");
                    this.ValidateProperty("trade_year", value);
                    this._trade_year = value;
                    this.RaiseDataMemberChanged("trade_year");
                    this.Ontrade_yearChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._trade_id_pk;
        }
    }
    
    /// <summary>
    /// The 'View_Borders' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class View_Borders : Entity
    {
        
        private Nullable<long> _area;
        
        private string _fips;
        
        private byte[] _geom;
        
        private int _id;
        
        private string _iso2;
        
        private string _iso3;
        
        private Nullable<double> _lat;
        
        private Nullable<double> _lon;
        
        private string _name;
        
        private Nullable<long> _pop2005;
        
        private Nullable<int> _region;
        
        private Nullable<int> _subregion;
        
        private Nullable<int> _un;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAREAChanging(Nullable<long> value);
        partial void OnAREAChanged();
        partial void OnFIPSChanging(string value);
        partial void OnFIPSChanged();
        partial void OngeomChanging(byte[] value);
        partial void OngeomChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnISO2Changing(string value);
        partial void OnISO2Changed();
        partial void OnISO3Changing(string value);
        partial void OnISO3Changed();
        partial void OnLATChanging(Nullable<double> value);
        partial void OnLATChanged();
        partial void OnLONChanging(Nullable<double> value);
        partial void OnLONChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnPOP2005Changing(Nullable<long> value);
        partial void OnPOP2005Changed();
        partial void OnREGIONChanging(Nullable<int> value);
        partial void OnREGIONChanged();
        partial void OnSUBREGIONChanging(Nullable<int> value);
        partial void OnSUBREGIONChanged();
        partial void OnUNChanging(Nullable<int> value);
        partial void OnUNChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="View_Borders"/> class.
        /// </summary>
        public View_Borders()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AREA' value.
        /// </summary>
        [DataMember()]
        public Nullable<long> AREA
        {
            get
            {
                return this._area;
            }
            set
            {
                if ((this._area != value))
                {
                    this.OnAREAChanging(value);
                    this.RaiseDataMemberChanging("AREA");
                    this.ValidateProperty("AREA", value);
                    this._area = value;
                    this.RaiseDataMemberChanged("AREA");
                    this.OnAREAChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FIPS' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string FIPS
        {
            get
            {
                return this._fips;
            }
            set
            {
                if ((this._fips != value))
                {
                    this.OnFIPSChanging(value);
                    this.RaiseDataMemberChanging("FIPS");
                    this.ValidateProperty("FIPS", value);
                    this._fips = value;
                    this.RaiseDataMemberChanged("FIPS");
                    this.OnFIPSChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'geom' value.
        /// </summary>
        [DataMember()]
        public byte[] geom
        {
            get
            {
                return this._geom;
            }
            set
            {
                if ((this._geom != value))
                {
                    this.OngeomChanging(value);
                    this.RaiseDataMemberChanging("geom");
                    this.ValidateProperty("geom", value);
                    this._geom = value;
                    this.RaiseDataMemberChanged("geom");
                    this.OngeomChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ISO2' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ISO2
        {
            get
            {
                return this._iso2;
            }
            set
            {
                if ((this._iso2 != value))
                {
                    this.OnISO2Changing(value);
                    this.RaiseDataMemberChanging("ISO2");
                    this.ValidateProperty("ISO2", value);
                    this._iso2 = value;
                    this.RaiseDataMemberChanged("ISO2");
                    this.OnISO2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ISO3' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ISO3
        {
            get
            {
                return this._iso3;
            }
            set
            {
                if ((this._iso3 != value))
                {
                    this.OnISO3Changing(value);
                    this.RaiseDataMemberChanging("ISO3");
                    this.ValidateProperty("ISO3", value);
                    this._iso3 = value;
                    this.RaiseDataMemberChanged("ISO3");
                    this.OnISO3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LAT' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> LAT
        {
            get
            {
                return this._lat;
            }
            set
            {
                if ((this._lat != value))
                {
                    this.OnLATChanging(value);
                    this.RaiseDataMemberChanging("LAT");
                    this.ValidateProperty("LAT", value);
                    this._lat = value;
                    this.RaiseDataMemberChanged("LAT");
                    this.OnLATChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LON' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> LON
        {
            get
            {
                return this._lon;
            }
            set
            {
                if ((this._lon != value))
                {
                    this.OnLONChanging(value);
                    this.RaiseDataMemberChanging("LON");
                    this.ValidateProperty("LON", value);
                    this._lon = value;
                    this.RaiseDataMemberChanged("LON");
                    this.OnLONChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NAME' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string NAME
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNAMEChanging(value);
                    this.RaiseDataMemberChanging("NAME");
                    this.ValidateProperty("NAME", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'POP2005' value.
        /// </summary>
        [DataMember()]
        public Nullable<long> POP2005
        {
            get
            {
                return this._pop2005;
            }
            set
            {
                if ((this._pop2005 != value))
                {
                    this.OnPOP2005Changing(value);
                    this.RaiseDataMemberChanging("POP2005");
                    this.ValidateProperty("POP2005", value);
                    this._pop2005 = value;
                    this.RaiseDataMemberChanged("POP2005");
                    this.OnPOP2005Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'REGION' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> REGION
        {
            get
            {
                return this._region;
            }
            set
            {
                if ((this._region != value))
                {
                    this.OnREGIONChanging(value);
                    this.RaiseDataMemberChanging("REGION");
                    this.ValidateProperty("REGION", value);
                    this._region = value;
                    this.RaiseDataMemberChanged("REGION");
                    this.OnREGIONChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SUBREGION' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> SUBREGION
        {
            get
            {
                return this._subregion;
            }
            set
            {
                if ((this._subregion != value))
                {
                    this.OnSUBREGIONChanging(value);
                    this.RaiseDataMemberChanging("SUBREGION");
                    this.ValidateProperty("SUBREGION", value);
                    this._subregion = value;
                    this.RaiseDataMemberChanged("SUBREGION");
                    this.OnSUBREGIONChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UN' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> UN
        {
            get
            {
                return this._un;
            }
            set
            {
                if ((this._un != value))
                {
                    this.OnUNChanging(value);
                    this.RaiseDataMemberChanging("UN");
                    this.ValidateProperty("UN", value);
                    this._un = value;
                    this.RaiseDataMemberChanged("UN");
                    this.OnUNChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'View_CountryBorder' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class View_CountryBorder : Entity
    {
        
        private Nullable<long> _area;
        
        private string _fips;
        
        private string _geom;
        
        private int _id;
        
        private string _iso2;
        
        private string _iso3;
        
        private Nullable<double> _lat;
        
        private Nullable<double> _lon;
        
        private string _name;
        
        private Nullable<long> _pop2005;
        
        private Nullable<int> _region;
        
        private Nullable<int> _subregion;
        
        private Nullable<int> _un;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAREAChanging(Nullable<long> value);
        partial void OnAREAChanged();
        partial void OnFIPSChanging(string value);
        partial void OnFIPSChanged();
        partial void OngeomChanging(string value);
        partial void OngeomChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnISO2Changing(string value);
        partial void OnISO2Changed();
        partial void OnISO3Changing(string value);
        partial void OnISO3Changed();
        partial void OnLATChanging(Nullable<double> value);
        partial void OnLATChanged();
        partial void OnLONChanging(Nullable<double> value);
        partial void OnLONChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnPOP2005Changing(Nullable<long> value);
        partial void OnPOP2005Changed();
        partial void OnREGIONChanging(Nullable<int> value);
        partial void OnREGIONChanged();
        partial void OnSUBREGIONChanging(Nullable<int> value);
        partial void OnSUBREGIONChanged();
        partial void OnUNChanging(Nullable<int> value);
        partial void OnUNChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="View_CountryBorder"/> class.
        /// </summary>
        public View_CountryBorder()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AREA' value.
        /// </summary>
        [DataMember()]
        public Nullable<long> AREA
        {
            get
            {
                return this._area;
            }
            set
            {
                if ((this._area != value))
                {
                    this.OnAREAChanging(value);
                    this.RaiseDataMemberChanging("AREA");
                    this.ValidateProperty("AREA", value);
                    this._area = value;
                    this.RaiseDataMemberChanged("AREA");
                    this.OnAREAChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FIPS' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string FIPS
        {
            get
            {
                return this._fips;
            }
            set
            {
                if ((this._fips != value))
                {
                    this.OnFIPSChanging(value);
                    this.RaiseDataMemberChanging("FIPS");
                    this.ValidateProperty("FIPS", value);
                    this._fips = value;
                    this.RaiseDataMemberChanged("FIPS");
                    this.OnFIPSChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'geom' value.
        /// </summary>
        [DataMember()]
        public string geom
        {
            get
            {
                return this._geom;
            }
            set
            {
                if ((this._geom != value))
                {
                    this.OngeomChanging(value);
                    this.RaiseDataMemberChanging("geom");
                    this.ValidateProperty("geom", value);
                    this._geom = value;
                    this.RaiseDataMemberChanged("geom");
                    this.OngeomChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ISO2' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ISO2
        {
            get
            {
                return this._iso2;
            }
            set
            {
                if ((this._iso2 != value))
                {
                    this.OnISO2Changing(value);
                    this.RaiseDataMemberChanging("ISO2");
                    this.ValidateProperty("ISO2", value);
                    this._iso2 = value;
                    this.RaiseDataMemberChanged("ISO2");
                    this.OnISO2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ISO3' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ISO3
        {
            get
            {
                return this._iso3;
            }
            set
            {
                if ((this._iso3 != value))
                {
                    this.OnISO3Changing(value);
                    this.RaiseDataMemberChanging("ISO3");
                    this.ValidateProperty("ISO3", value);
                    this._iso3 = value;
                    this.RaiseDataMemberChanged("ISO3");
                    this.OnISO3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LAT' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> LAT
        {
            get
            {
                return this._lat;
            }
            set
            {
                if ((this._lat != value))
                {
                    this.OnLATChanging(value);
                    this.RaiseDataMemberChanging("LAT");
                    this.ValidateProperty("LAT", value);
                    this._lat = value;
                    this.RaiseDataMemberChanged("LAT");
                    this.OnLATChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LON' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> LON
        {
            get
            {
                return this._lon;
            }
            set
            {
                if ((this._lon != value))
                {
                    this.OnLONChanging(value);
                    this.RaiseDataMemberChanging("LON");
                    this.ValidateProperty("LON", value);
                    this._lon = value;
                    this.RaiseDataMemberChanged("LON");
                    this.OnLONChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NAME' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string NAME
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNAMEChanging(value);
                    this.RaiseDataMemberChanging("NAME");
                    this.ValidateProperty("NAME", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'POP2005' value.
        /// </summary>
        [DataMember()]
        public Nullable<long> POP2005
        {
            get
            {
                return this._pop2005;
            }
            set
            {
                if ((this._pop2005 != value))
                {
                    this.OnPOP2005Changing(value);
                    this.RaiseDataMemberChanging("POP2005");
                    this.ValidateProperty("POP2005", value);
                    this._pop2005 = value;
                    this.RaiseDataMemberChanged("POP2005");
                    this.OnPOP2005Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'REGION' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> REGION
        {
            get
            {
                return this._region;
            }
            set
            {
                if ((this._region != value))
                {
                    this.OnREGIONChanging(value);
                    this.RaiseDataMemberChanging("REGION");
                    this.ValidateProperty("REGION", value);
                    this._region = value;
                    this.RaiseDataMemberChanged("REGION");
                    this.OnREGIONChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SUBREGION' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> SUBREGION
        {
            get
            {
                return this._subregion;
            }
            set
            {
                if ((this._subregion != value))
                {
                    this.OnSUBREGIONChanging(value);
                    this.RaiseDataMemberChanging("SUBREGION");
                    this.ValidateProperty("SUBREGION", value);
                    this._subregion = value;
                    this.RaiseDataMemberChanged("SUBREGION");
                    this.OnSUBREGIONChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UN' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> UN
        {
            get
            {
                return this._un;
            }
            set
            {
                if ((this._un != value))
                {
                    this.OnUNChanging(value);
                    this.RaiseDataMemberChanging("UN");
                    this.ValidateProperty("UN", value);
                    this._un = value;
                    this.RaiseDataMemberChanged("UN");
                    this.OnUNChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'View_CountryIndicator' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class View_CountryIndicator : Entity
    {
        
        private int _country_id_pk;
        
        private Nullable<decimal> _country_indicator_value;
        
        private Nullable<int> _country_indicator_year;
        
        private string _country_iso_code;
        
        private string _country_name;
        
        private string _indicator_code;
        
        private string _indicator_description;
        
        private string _indicator_name;
        
        private string _indicator_unit;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Oncountry_id_pkChanging(int value);
        partial void Oncountry_id_pkChanged();
        partial void Oncountry_indicator_valueChanging(Nullable<decimal> value);
        partial void Oncountry_indicator_valueChanged();
        partial void Oncountry_indicator_yearChanging(Nullable<int> value);
        partial void Oncountry_indicator_yearChanged();
        partial void Oncountry_iso_codeChanging(string value);
        partial void Oncountry_iso_codeChanged();
        partial void Oncountry_nameChanging(string value);
        partial void Oncountry_nameChanged();
        partial void Onindicator_codeChanging(string value);
        partial void Onindicator_codeChanged();
        partial void Onindicator_descriptionChanging(string value);
        partial void Onindicator_descriptionChanged();
        partial void Onindicator_nameChanging(string value);
        partial void Onindicator_nameChanged();
        partial void Onindicator_unitChanging(string value);
        partial void Onindicator_unitChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="View_CountryIndicator"/> class.
        /// </summary>
        public View_CountryIndicator()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'country_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int country_id_pk
        {
            get
            {
                return this._country_id_pk;
            }
            set
            {
                if ((this._country_id_pk != value))
                {
                    this.Oncountry_id_pkChanging(value);
                    this.ValidateProperty("country_id_pk", value);
                    this._country_id_pk = value;
                    this.RaisePropertyChanged("country_id_pk");
                    this.Oncountry_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_indicator_value' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> country_indicator_value
        {
            get
            {
                return this._country_indicator_value;
            }
            set
            {
                if ((this._country_indicator_value != value))
                {
                    this.Oncountry_indicator_valueChanging(value);
                    this.RaiseDataMemberChanging("country_indicator_value");
                    this.ValidateProperty("country_indicator_value", value);
                    this._country_indicator_value = value;
                    this.RaiseDataMemberChanged("country_indicator_value");
                    this.Oncountry_indicator_valueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_indicator_year' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> country_indicator_year
        {
            get
            {
                return this._country_indicator_year;
            }
            set
            {
                if ((this._country_indicator_year != value))
                {
                    this.Oncountry_indicator_yearChanging(value);
                    this.RaiseDataMemberChanging("country_indicator_year");
                    this.ValidateProperty("country_indicator_year", value);
                    this._country_indicator_year = value;
                    this.RaiseDataMemberChanged("country_indicator_year");
                    this.Oncountry_indicator_yearChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_iso_code' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string country_iso_code
        {
            get
            {
                return this._country_iso_code;
            }
            set
            {
                if ((this._country_iso_code != value))
                {
                    this.Oncountry_iso_codeChanging(value);
                    this.RaiseDataMemberChanging("country_iso_code");
                    this.ValidateProperty("country_iso_code", value);
                    this._country_iso_code = value;
                    this.RaiseDataMemberChanged("country_iso_code");
                    this.Oncountry_iso_codeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string country_name
        {
            get
            {
                return this._country_name;
            }
            set
            {
                if ((this._country_name != value))
                {
                    this.Oncountry_nameChanging(value);
                    this.RaiseDataMemberChanging("country_name");
                    this.ValidateProperty("country_name", value);
                    this._country_name = value;
                    this.RaiseDataMemberChanged("country_name");
                    this.Oncountry_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_code' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string indicator_code
        {
            get
            {
                return this._indicator_code;
            }
            set
            {
                if ((this._indicator_code != value))
                {
                    this.Onindicator_codeChanging(value);
                    this.RaiseDataMemberChanging("indicator_code");
                    this.ValidateProperty("indicator_code", value);
                    this._indicator_code = value;
                    this.RaiseDataMemberChanged("indicator_code");
                    this.Onindicator_codeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_description' value.
        /// </summary>
        [DataMember()]
        public string indicator_description
        {
            get
            {
                return this._indicator_description;
            }
            set
            {
                if ((this._indicator_description != value))
                {
                    this.Onindicator_descriptionChanging(value);
                    this.RaiseDataMemberChanging("indicator_description");
                    this.ValidateProperty("indicator_description", value);
                    this._indicator_description = value;
                    this.RaiseDataMemberChanged("indicator_description");
                    this.Onindicator_descriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string indicator_name
        {
            get
            {
                return this._indicator_name;
            }
            set
            {
                if ((this._indicator_name != value))
                {
                    this.Onindicator_nameChanging(value);
                    this.RaiseDataMemberChanging("indicator_name");
                    this.ValidateProperty("indicator_name", value);
                    this._indicator_name = value;
                    this.RaiseDataMemberChanged("indicator_name");
                    this.Onindicator_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_unit' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string indicator_unit
        {
            get
            {
                return this._indicator_unit;
            }
            set
            {
                if ((this._indicator_unit != value))
                {
                    this.Onindicator_unitChanging(value);
                    this.RaiseDataMemberChanging("indicator_unit");
                    this.ValidateProperty("indicator_unit", value);
                    this._indicator_unit = value;
                    this.RaiseDataMemberChanged("indicator_unit");
                    this.Onindicator_unitChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._country_id_pk;
        }
    }
    
    /// <summary>
    /// The 'View_CountryIndicatorTab' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class View_CountryIndicatorTab : Entity
    {
        
        private int _country_id_pk;
        
        private Nullable<decimal> _country_indicator_value;
        
        private Nullable<int> _country_indicator_year;
        
        private string _country_iso_code;
        
        private string _country_name;
        
        private string _indicator_code;
        
        private string _indicator_description;
        
        private string _indicator_name;
        
        private string _indicator_unit;
        
        private int _tab_id_pk;
        
        private string _tab_name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Oncountry_id_pkChanging(int value);
        partial void Oncountry_id_pkChanged();
        partial void Oncountry_indicator_valueChanging(Nullable<decimal> value);
        partial void Oncountry_indicator_valueChanged();
        partial void Oncountry_indicator_yearChanging(Nullable<int> value);
        partial void Oncountry_indicator_yearChanged();
        partial void Oncountry_iso_codeChanging(string value);
        partial void Oncountry_iso_codeChanged();
        partial void Oncountry_nameChanging(string value);
        partial void Oncountry_nameChanged();
        partial void Onindicator_codeChanging(string value);
        partial void Onindicator_codeChanged();
        partial void Onindicator_descriptionChanging(string value);
        partial void Onindicator_descriptionChanged();
        partial void Onindicator_nameChanging(string value);
        partial void Onindicator_nameChanged();
        partial void Onindicator_unitChanging(string value);
        partial void Onindicator_unitChanged();
        partial void Ontab_id_pkChanging(int value);
        partial void Ontab_id_pkChanged();
        partial void Ontab_nameChanging(string value);
        partial void Ontab_nameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="View_CountryIndicatorTab"/> class.
        /// </summary>
        public View_CountryIndicatorTab()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'country_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int country_id_pk
        {
            get
            {
                return this._country_id_pk;
            }
            set
            {
                if ((this._country_id_pk != value))
                {
                    this.Oncountry_id_pkChanging(value);
                    this.ValidateProperty("country_id_pk", value);
                    this._country_id_pk = value;
                    this.RaisePropertyChanged("country_id_pk");
                    this.Oncountry_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_indicator_value' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> country_indicator_value
        {
            get
            {
                return this._country_indicator_value;
            }
            set
            {
                if ((this._country_indicator_value != value))
                {
                    this.Oncountry_indicator_valueChanging(value);
                    this.RaiseDataMemberChanging("country_indicator_value");
                    this.ValidateProperty("country_indicator_value", value);
                    this._country_indicator_value = value;
                    this.RaiseDataMemberChanged("country_indicator_value");
                    this.Oncountry_indicator_valueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_indicator_year' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> country_indicator_year
        {
            get
            {
                return this._country_indicator_year;
            }
            set
            {
                if ((this._country_indicator_year != value))
                {
                    this.Oncountry_indicator_yearChanging(value);
                    this.RaiseDataMemberChanging("country_indicator_year");
                    this.ValidateProperty("country_indicator_year", value);
                    this._country_indicator_year = value;
                    this.RaiseDataMemberChanged("country_indicator_year");
                    this.Oncountry_indicator_yearChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_iso_code' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string country_iso_code
        {
            get
            {
                return this._country_iso_code;
            }
            set
            {
                if ((this._country_iso_code != value))
                {
                    this.Oncountry_iso_codeChanging(value);
                    this.RaiseDataMemberChanging("country_iso_code");
                    this.ValidateProperty("country_iso_code", value);
                    this._country_iso_code = value;
                    this.RaiseDataMemberChanged("country_iso_code");
                    this.Oncountry_iso_codeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string country_name
        {
            get
            {
                return this._country_name;
            }
            set
            {
                if ((this._country_name != value))
                {
                    this.Oncountry_nameChanging(value);
                    this.RaiseDataMemberChanging("country_name");
                    this.ValidateProperty("country_name", value);
                    this._country_name = value;
                    this.RaiseDataMemberChanged("country_name");
                    this.Oncountry_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_code' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string indicator_code
        {
            get
            {
                return this._indicator_code;
            }
            set
            {
                if ((this._indicator_code != value))
                {
                    this.Onindicator_codeChanging(value);
                    this.RaiseDataMemberChanging("indicator_code");
                    this.ValidateProperty("indicator_code", value);
                    this._indicator_code = value;
                    this.RaiseDataMemberChanged("indicator_code");
                    this.Onindicator_codeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_description' value.
        /// </summary>
        [DataMember()]
        public string indicator_description
        {
            get
            {
                return this._indicator_description;
            }
            set
            {
                if ((this._indicator_description != value))
                {
                    this.Onindicator_descriptionChanging(value);
                    this.RaiseDataMemberChanging("indicator_description");
                    this.ValidateProperty("indicator_description", value);
                    this._indicator_description = value;
                    this.RaiseDataMemberChanged("indicator_description");
                    this.Onindicator_descriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string indicator_name
        {
            get
            {
                return this._indicator_name;
            }
            set
            {
                if ((this._indicator_name != value))
                {
                    this.Onindicator_nameChanging(value);
                    this.RaiseDataMemberChanging("indicator_name");
                    this.ValidateProperty("indicator_name", value);
                    this._indicator_name = value;
                    this.RaiseDataMemberChanged("indicator_name");
                    this.Onindicator_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_unit' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string indicator_unit
        {
            get
            {
                return this._indicator_unit;
            }
            set
            {
                if ((this._indicator_unit != value))
                {
                    this.Onindicator_unitChanging(value);
                    this.RaiseDataMemberChanging("indicator_unit");
                    this.ValidateProperty("indicator_unit", value);
                    this._indicator_unit = value;
                    this.RaiseDataMemberChanged("indicator_unit");
                    this.Onindicator_unitChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'tab_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int tab_id_pk
        {
            get
            {
                return this._tab_id_pk;
            }
            set
            {
                if ((this._tab_id_pk != value))
                {
                    this.Ontab_id_pkChanging(value);
                    this.ValidateProperty("tab_id_pk", value);
                    this._tab_id_pk = value;
                    this.RaisePropertyChanged("tab_id_pk");
                    this.Ontab_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'tab_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string tab_name
        {
            get
            {
                return this._tab_name;
            }
            set
            {
                if ((this._tab_name != value))
                {
                    this.Ontab_nameChanging(value);
                    this.RaiseDataMemberChanging("tab_name");
                    this.ValidateProperty("tab_name", value);
                    this._tab_name = value;
                    this.RaiseDataMemberChanged("tab_name");
                    this.Ontab_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._country_id_pk, this._tab_id_pk);
        }
    }
    
    /// <summary>
    /// The 'View_GeneralCountry' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class View_GeneralCountry : Entity
    {
        
        private int _country_id_pk;
        
        private string _country_name;
        
        private string _income_level_name;
        
        private string _lending_type_name;
        
        private string _region_name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Oncountry_id_pkChanging(int value);
        partial void Oncountry_id_pkChanged();
        partial void Oncountry_nameChanging(string value);
        partial void Oncountry_nameChanged();
        partial void Onincome_level_nameChanging(string value);
        partial void Onincome_level_nameChanged();
        partial void Onlending_type_nameChanging(string value);
        partial void Onlending_type_nameChanged();
        partial void Onregion_nameChanging(string value);
        partial void Onregion_nameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="View_GeneralCountry"/> class.
        /// </summary>
        public View_GeneralCountry()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'country_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int country_id_pk
        {
            get
            {
                return this._country_id_pk;
            }
            set
            {
                if ((this._country_id_pk != value))
                {
                    this.Oncountry_id_pkChanging(value);
                    this.ValidateProperty("country_id_pk", value);
                    this._country_id_pk = value;
                    this.RaisePropertyChanged("country_id_pk");
                    this.Oncountry_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'country_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string country_name
        {
            get
            {
                return this._country_name;
            }
            set
            {
                if ((this._country_name != value))
                {
                    this.Oncountry_nameChanging(value);
                    this.RaiseDataMemberChanging("country_name");
                    this.ValidateProperty("country_name", value);
                    this._country_name = value;
                    this.RaiseDataMemberChanged("country_name");
                    this.Oncountry_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'income_level_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string income_level_name
        {
            get
            {
                return this._income_level_name;
            }
            set
            {
                if ((this._income_level_name != value))
                {
                    this.Onincome_level_nameChanging(value);
                    this.RaiseDataMemberChanging("income_level_name");
                    this.ValidateProperty("income_level_name", value);
                    this._income_level_name = value;
                    this.RaiseDataMemberChanged("income_level_name");
                    this.Onincome_level_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'lending_type_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string lending_type_name
        {
            get
            {
                return this._lending_type_name;
            }
            set
            {
                if ((this._lending_type_name != value))
                {
                    this.Onlending_type_nameChanging(value);
                    this.RaiseDataMemberChanging("lending_type_name");
                    this.ValidateProperty("lending_type_name", value);
                    this._lending_type_name = value;
                    this.RaiseDataMemberChanged("lending_type_name");
                    this.Onlending_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'region_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string region_name
        {
            get
            {
                return this._region_name;
            }
            set
            {
                if ((this._region_name != value))
                {
                    this.Onregion_nameChanging(value);
                    this.RaiseDataMemberChanging("region_name");
                    this.ValidateProperty("region_name", value);
                    this._region_name = value;
                    this.RaiseDataMemberChanged("region_name");
                    this.Onregion_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._country_id_pk;
        }
    }
    
    /// <summary>
    /// The 'View_TabIndicator' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.DataModel")]
    public sealed partial class View_TabIndicator : Entity
    {
        
        private string _indicator_code;
        
        private string _indicator_description;
        
        private int _indicator_id_pk;
        
        private string _indicator_name;
        
        private string _indicator_unit;
        
        private int _tab_id_pk;
        
        private string _tab_name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onindicator_codeChanging(string value);
        partial void Onindicator_codeChanged();
        partial void Onindicator_descriptionChanging(string value);
        partial void Onindicator_descriptionChanged();
        partial void Onindicator_id_pkChanging(int value);
        partial void Onindicator_id_pkChanged();
        partial void Onindicator_nameChanging(string value);
        partial void Onindicator_nameChanged();
        partial void Onindicator_unitChanging(string value);
        partial void Onindicator_unitChanged();
        partial void Ontab_id_pkChanging(int value);
        partial void Ontab_id_pkChanged();
        partial void Ontab_nameChanging(string value);
        partial void Ontab_nameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="View_TabIndicator"/> class.
        /// </summary>
        public View_TabIndicator()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_code' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string indicator_code
        {
            get
            {
                return this._indicator_code;
            }
            set
            {
                if ((this._indicator_code != value))
                {
                    this.Onindicator_codeChanging(value);
                    this.RaiseDataMemberChanging("indicator_code");
                    this.ValidateProperty("indicator_code", value);
                    this._indicator_code = value;
                    this.RaiseDataMemberChanged("indicator_code");
                    this.Onindicator_codeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_description' value.
        /// </summary>
        [DataMember()]
        public string indicator_description
        {
            get
            {
                return this._indicator_description;
            }
            set
            {
                if ((this._indicator_description != value))
                {
                    this.Onindicator_descriptionChanging(value);
                    this.RaiseDataMemberChanging("indicator_description");
                    this.ValidateProperty("indicator_description", value);
                    this._indicator_description = value;
                    this.RaiseDataMemberChanged("indicator_description");
                    this.Onindicator_descriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int indicator_id_pk
        {
            get
            {
                return this._indicator_id_pk;
            }
            set
            {
                if ((this._indicator_id_pk != value))
                {
                    this.Onindicator_id_pkChanging(value);
                    this.ValidateProperty("indicator_id_pk", value);
                    this._indicator_id_pk = value;
                    this.RaisePropertyChanged("indicator_id_pk");
                    this.Onindicator_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string indicator_name
        {
            get
            {
                return this._indicator_name;
            }
            set
            {
                if ((this._indicator_name != value))
                {
                    this.Onindicator_nameChanging(value);
                    this.RaiseDataMemberChanging("indicator_name");
                    this.ValidateProperty("indicator_name", value);
                    this._indicator_name = value;
                    this.RaiseDataMemberChanged("indicator_name");
                    this.Onindicator_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'indicator_unit' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string indicator_unit
        {
            get
            {
                return this._indicator_unit;
            }
            set
            {
                if ((this._indicator_unit != value))
                {
                    this.Onindicator_unitChanging(value);
                    this.RaiseDataMemberChanging("indicator_unit");
                    this.ValidateProperty("indicator_unit", value);
                    this._indicator_unit = value;
                    this.RaiseDataMemberChanged("indicator_unit");
                    this.Onindicator_unitChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'tab_id_pk' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int tab_id_pk
        {
            get
            {
                return this._tab_id_pk;
            }
            set
            {
                if ((this._tab_id_pk != value))
                {
                    this.Ontab_id_pkChanging(value);
                    this.ValidateProperty("tab_id_pk", value);
                    this._tab_id_pk = value;
                    this.RaisePropertyChanged("tab_id_pk");
                    this.Ontab_id_pkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'tab_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string tab_name
        {
            get
            {
                return this._tab_name;
            }
            set
            {
                if ((this._tab_name != value))
                {
                    this.Ontab_nameChanging(value);
                    this.RaiseDataMemberChanging("tab_name");
                    this.ValidateProperty("tab_name", value);
                    this._tab_name = value;
                    this.RaiseDataMemberChanged("tab_name");
                    this.Ontab_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._indicator_id_pk, this._tab_id_pk);
        }
    }
}
namespace NCRVisual.web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using NCRVisual.web.DataModel;
    
    
    /// <summary>
    /// The domain context corresponding to the 'WBDomainService' domain service.
    /// </summary>
    public sealed partial class WBDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WBDomainContext"/> class.
        /// </summary>
        public WBDomainContext() : 
                this(new WebDomainClient<IWBDomainServiceContract>(new Uri("NCRVisual-web-Services-WBDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WBDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The WBDomainService service URI.</param>
        public WBDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IWBDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WBDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public WBDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="View_CountryBorder"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<View_CountryBorder> View_CountryBorders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<View_CountryBorder>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="View_GeneralCountry"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<View_GeneralCountry> View_GeneralCountries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<View_GeneralCountry>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="tbl_projects"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<tbl_projects> tbl_projects
        {
            get
            {
                return base.EntityContainer.GetEntitySet<tbl_projects>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="tbl_trades"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<tbl_trades> tbl_trades
        {
            get
            {
                return base.EntityContainer.GetEntitySet<tbl_trades>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ref_country_indicator"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<ref_country_indicator> ref_country_indicators
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ref_country_indicator>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ref_tab_indicator"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<ref_tab_indicator> ref_tab_indicators
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ref_tab_indicator>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="tbl_countries"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<tbl_countries> tbl_countries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<tbl_countries>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="tbl_income_levels"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<tbl_income_levels> tbl_income_levels
        {
            get
            {
                return base.EntityContainer.GetEntitySet<tbl_income_levels>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="tbl_indicators"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<tbl_indicators> tbl_indicators
        {
            get
            {
                return base.EntityContainer.GetEntitySet<tbl_indicators>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="tbl_lending_types"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<tbl_lending_types> tbl_lending_types
        {
            get
            {
                return base.EntityContainer.GetEntitySet<tbl_lending_types>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="tbl_regions"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<tbl_regions> tbl_regions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<tbl_regions>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="tbl_tabs"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<tbl_tabs> tbl_tabs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<tbl_tabs>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="View_Borders"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<View_Borders> View_Borders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<View_Borders>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="View_CountryIndicator"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<View_CountryIndicator> View_CountryIndicators
        {
            get
            {
                return base.EntityContainer.GetEntitySet<View_CountryIndicator>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="View_CountryIndicatorTab"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<View_CountryIndicatorTab> View_CountryIndicatorTabs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<View_CountryIndicatorTab>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="View_TabIndicator"/> entities that have been loaded into this <see cref="WBDomainContext"/> instance.
        /// </summary>
        public EntitySet<View_TabIndicator> View_TabIndicators
        {
            get
            {
                return base.EntityContainer.GetEntitySet<View_TabIndicator>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="View_CountryBorder"/> entities using the 'GetCountryBorder' query.
        /// </summary>
        /// <param name="ISO">The value for the 'ISO' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="View_CountryBorder"/> entities.</returns>
        public EntityQuery<View_CountryBorder> GetCountryBorderQuery(string ISO)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ISO", ISO);
            this.ValidateMethod("GetCountryBorderQuery", parameters);
            return base.CreateQuery<View_CountryBorder>("GetCountryBorder", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="View_GeneralCountry"/> entities using the 'GetCountryGeneralInfo' query.
        /// </summary>
        /// <param name="country_pk">The value for the 'country_pk' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="View_GeneralCountry"/> entities.</returns>
        public EntityQuery<View_GeneralCountry> GetCountryGeneralInfoQuery(int country_pk)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("country_pk", country_pk);
            this.ValidateMethod("GetCountryGeneralInfoQuery", parameters);
            return base.CreateQuery<View_GeneralCountry>("GetCountryGeneralInfo", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="tbl_projects"/> entities using the 'GetCountryProjects' query.
        /// </summary>
        /// <param name="countryId">The value for the 'countryId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="tbl_projects"/> entities.</returns>
        public EntityQuery<tbl_projects> GetCountryProjectsQuery(int countryId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("countryId", countryId);
            this.ValidateMethod("GetCountryProjectsQuery", parameters);
            return base.CreateQuery<tbl_projects>("GetCountryProjects", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="tbl_trades"/> entities using the 'GetExportData' query.
        /// </summary>
        /// <param name="exportCountry">The value for the 'exportCountry' parameter of the query.</param>
        /// <param name="importCountryIdList">The value for the 'importCountryIdList' parameter of the query.</param>
        /// <param name="year">The value for the 'year' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="tbl_trades"/> entities.</returns>
        public EntityQuery<tbl_trades> GetExportDataQuery(int exportCountry, IEnumerable<int> importCountryIdList, int year)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("exportCountry", exportCountry);
            parameters.Add("importCountryIdList", importCountryIdList);
            parameters.Add("year", year);
            this.ValidateMethod("GetExportDataQuery", parameters);
            return base.CreateQuery<tbl_trades>("GetExportData", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="tbl_trades"/> entities using the 'GetImportData' query.
        /// </summary>
        /// <param name="importCountry">The value for the 'importCountry' parameter of the query.</param>
        /// <param name="exportCountryIdList">The value for the 'exportCountryIdList' parameter of the query.</param>
        /// <param name="year">The value for the 'year' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="tbl_trades"/> entities.</returns>
        public EntityQuery<tbl_trades> GetImportDataQuery(int importCountry, IEnumerable<int> exportCountryIdList, int year)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("importCountry", importCountry);
            parameters.Add("exportCountryIdList", exportCountryIdList);
            parameters.Add("year", year);
            this.ValidateMethod("GetImportDataQuery", parameters);
            return base.CreateQuery<tbl_trades>("GetImportData", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ref_country_indicator"/> entities using the 'GetRef_country_indicator' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ref_country_indicator"/> entities.</returns>
        public EntityQuery<ref_country_indicator> GetRef_country_indicatorQuery()
        {
            this.ValidateMethod("GetRef_country_indicatorQuery", null);
            return base.CreateQuery<ref_country_indicator>("GetRef_country_indicator", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ref_country_indicator"/> entities using the 'GetRef_country_indicatorInCountryIdList' query.
        /// </summary>
        /// <param name="countryIdList">The value for the 'countryIdList' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ref_country_indicator"/> entities.</returns>
        public EntityQuery<ref_country_indicator> GetRef_country_indicatorInCountryIdListQuery(IEnumerable<int> countryIdList)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("countryIdList", countryIdList);
            this.ValidateMethod("GetRef_country_indicatorInCountryIdListQuery", parameters);
            return base.CreateQuery<ref_country_indicator>("GetRef_country_indicatorInCountryIdList", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ref_country_indicator"/> entities using the 'GetRef_country_indicatorInIndicatorIDList' query.
        /// </summary>
        /// <param name="indicatorIdList">The value for the 'indicatorIdList' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ref_country_indicator"/> entities.</returns>
        public EntityQuery<ref_country_indicator> GetRef_country_indicatorInIndicatorIDListQuery(IEnumerable<int> indicatorIdList)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("indicatorIdList", indicatorIdList);
            this.ValidateMethod("GetRef_country_indicatorInIndicatorIDListQuery", parameters);
            return base.CreateQuery<ref_country_indicator>("GetRef_country_indicatorInIndicatorIDList", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ref_tab_indicator"/> entities using the 'GetRef_tab_indicator' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ref_tab_indicator"/> entities.</returns>
        public EntityQuery<ref_tab_indicator> GetRef_tab_indicatorQuery()
        {
            this.ValidateMethod("GetRef_tab_indicatorQuery", null);
            return base.CreateQuery<ref_tab_indicator>("GetRef_tab_indicator", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="tbl_countries"/> entities using the 'GetTbl_countries' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="tbl_countries"/> entities.</returns>
        public EntityQuery<tbl_countries> GetTbl_countriesQuery()
        {
            this.ValidateMethod("GetTbl_countriesQuery", null);
            return base.CreateQuery<tbl_countries>("GetTbl_countries", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="tbl_income_levels"/> entities using the 'GetTbl_income_levels' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="tbl_income_levels"/> entities.</returns>
        public EntityQuery<tbl_income_levels> GetTbl_income_levelsQuery()
        {
            this.ValidateMethod("GetTbl_income_levelsQuery", null);
            return base.CreateQuery<tbl_income_levels>("GetTbl_income_levels", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="tbl_indicators"/> entities using the 'GetTbl_indicators' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="tbl_indicators"/> entities.</returns>
        public EntityQuery<tbl_indicators> GetTbl_indicatorsQuery()
        {
            this.ValidateMethod("GetTbl_indicatorsQuery", null);
            return base.CreateQuery<tbl_indicators>("GetTbl_indicators", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="tbl_indicators"/> entities using the 'GetTbl_indicatorsInPKList' query.
        /// </summary>
        /// <param name="pks">The value for the 'pks' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="tbl_indicators"/> entities.</returns>
        public EntityQuery<tbl_indicators> GetTbl_indicatorsInPKListQuery(IEnumerable<int> pks)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("pks", pks);
            this.ValidateMethod("GetTbl_indicatorsInPKListQuery", parameters);
            return base.CreateQuery<tbl_indicators>("GetTbl_indicatorsInPKList", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="tbl_lending_types"/> entities using the 'GetTbl_lending_types' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="tbl_lending_types"/> entities.</returns>
        public EntityQuery<tbl_lending_types> GetTbl_lending_typesQuery()
        {
            this.ValidateMethod("GetTbl_lending_typesQuery", null);
            return base.CreateQuery<tbl_lending_types>("GetTbl_lending_types", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="tbl_projects"/> entities using the 'GetTbl_projects' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="tbl_projects"/> entities.</returns>
        public EntityQuery<tbl_projects> GetTbl_projectsQuery()
        {
            this.ValidateMethod("GetTbl_projectsQuery", null);
            return base.CreateQuery<tbl_projects>("GetTbl_projects", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="tbl_regions"/> entities using the 'GetTbl_regions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="tbl_regions"/> entities.</returns>
        public EntityQuery<tbl_regions> GetTbl_regionsQuery()
        {
            this.ValidateMethod("GetTbl_regionsQuery", null);
            return base.CreateQuery<tbl_regions>("GetTbl_regions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="tbl_tabs"/> entities using the 'GetTbl_tabs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="tbl_tabs"/> entities.</returns>
        public EntityQuery<tbl_tabs> GetTbl_tabsQuery()
        {
            this.ValidateMethod("GetTbl_tabsQuery", null);
            return base.CreateQuery<tbl_tabs>("GetTbl_tabs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="tbl_trades"/> entities using the 'GetTbl_trades' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="tbl_trades"/> entities.</returns>
        public EntityQuery<tbl_trades> GetTbl_tradesQuery()
        {
            this.ValidateMethod("GetTbl_tradesQuery", null);
            return base.CreateQuery<tbl_trades>("GetTbl_trades", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="View_Borders"/> entities using the 'GetView_Borders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="View_Borders"/> entities.</returns>
        public EntityQuery<View_Borders> GetView_BordersQuery()
        {
            this.ValidateMethod("GetView_BordersQuery", null);
            return base.CreateQuery<View_Borders>("GetView_Borders", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="View_CountryBorder"/> entities using the 'GetView_CountryBorder' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="View_CountryBorder"/> entities.</returns>
        public EntityQuery<View_CountryBorder> GetView_CountryBorderQuery()
        {
            this.ValidateMethod("GetView_CountryBorderQuery", null);
            return base.CreateQuery<View_CountryBorder>("GetView_CountryBorder", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="View_CountryIndicator"/> entities using the 'GetView_CountryIndicator' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="View_CountryIndicator"/> entities.</returns>
        public EntityQuery<View_CountryIndicator> GetView_CountryIndicatorQuery()
        {
            this.ValidateMethod("GetView_CountryIndicatorQuery", null);
            return base.CreateQuery<View_CountryIndicator>("GetView_CountryIndicator", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="View_CountryIndicatorTab"/> entities using the 'GetView_CountryIndicatorTab' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="View_CountryIndicatorTab"/> entities.</returns>
        public EntityQuery<View_CountryIndicatorTab> GetView_CountryIndicatorTabQuery()
        {
            this.ValidateMethod("GetView_CountryIndicatorTabQuery", null);
            return base.CreateQuery<View_CountryIndicatorTab>("GetView_CountryIndicatorTab", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="View_GeneralCountry"/> entities using the 'GetView_GeneralCountry' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="View_GeneralCountry"/> entities.</returns>
        public EntityQuery<View_GeneralCountry> GetView_GeneralCountryQuery()
        {
            this.ValidateMethod("GetView_GeneralCountryQuery", null);
            return base.CreateQuery<View_GeneralCountry>("GetView_GeneralCountry", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="View_TabIndicator"/> entities using the 'GetView_TabIndicator' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="View_TabIndicator"/> entities.</returns>
        public EntityQuery<View_TabIndicator> GetView_TabIndicatorQuery()
        {
            this.ValidateMethod("GetView_TabIndicatorQuery", null);
            return base.CreateQuery<View_TabIndicator>("GetView_TabIndicator", null, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new WBDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'WBDomainService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IWBDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCountryBorder' operation.
            /// </summary>
            /// <param name="ISO">The value for the 'ISO' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetCountryBorderDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetCountryBorder", ReplyAction="http://tempuri.org/WBDomainService/GetCountryBorderResponse")]
            [WebGet()]
            IAsyncResult BeginGetCountryBorder(string ISO, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCountryBorder'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCountryBorder'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCountryBorder' operation.</returns>
            QueryResult<View_CountryBorder> EndGetCountryBorder(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCountryGeneralInfo' operation.
            /// </summary>
            /// <param name="country_pk">The value for the 'country_pk' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetCountryGeneralInfoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetCountryGeneralInfo", ReplyAction="http://tempuri.org/WBDomainService/GetCountryGeneralInfoResponse")]
            [WebGet()]
            IAsyncResult BeginGetCountryGeneralInfo(int country_pk, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCountryGeneralInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCountryGeneralInfo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCountryGeneralInfo' operation.</returns>
            QueryResult<View_GeneralCountry> EndGetCountryGeneralInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCountryProjects' operation.
            /// </summary>
            /// <param name="countryId">The value for the 'countryId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetCountryProjectsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetCountryProjects", ReplyAction="http://tempuri.org/WBDomainService/GetCountryProjectsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCountryProjects(int countryId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCountryProjects'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCountryProjects'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCountryProjects' operation.</returns>
            QueryResult<tbl_projects> EndGetCountryProjects(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetExportData' operation.
            /// </summary>
            /// <param name="exportCountry">The value for the 'exportCountry' parameter of this action.</param>
            /// <param name="importCountryIdList">The value for the 'importCountryIdList' parameter of this action.</param>
            /// <param name="year">The value for the 'year' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetExportDataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetExportData", ReplyAction="http://tempuri.org/WBDomainService/GetExportDataResponse")]
            [WebGet()]
            IAsyncResult BeginGetExportData(int exportCountry, IEnumerable<int> importCountryIdList, int year, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetExportData'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetExportData'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetExportData' operation.</returns>
            QueryResult<tbl_trades> EndGetExportData(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetImportData' operation.
            /// </summary>
            /// <param name="importCountry">The value for the 'importCountry' parameter of this action.</param>
            /// <param name="exportCountryIdList">The value for the 'exportCountryIdList' parameter of this action.</param>
            /// <param name="year">The value for the 'year' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetImportDataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetImportData", ReplyAction="http://tempuri.org/WBDomainService/GetImportDataResponse")]
            [WebGet()]
            IAsyncResult BeginGetImportData(int importCountry, IEnumerable<int> exportCountryIdList, int year, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetImportData'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetImportData'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetImportData' operation.</returns>
            QueryResult<tbl_trades> EndGetImportData(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRef_country_indicator' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetRef_country_indicatorDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetRef_country_indicator", ReplyAction="http://tempuri.org/WBDomainService/GetRef_country_indicatorResponse")]
            [WebGet()]
            IAsyncResult BeginGetRef_country_indicator(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRef_country_indicator'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRef_country_indicator'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRef_country_indicator' operation.</returns>
            QueryResult<ref_country_indicator> EndGetRef_country_indicator(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRef_country_indicatorInCountryIdList' operation.
            /// </summary>
            /// <param name="countryIdList">The value for the 'countryIdList' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetRef_country_indicatorInCountryIdListDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetRef_country_indicatorInCountryIdList", ReplyAction="http://tempuri.org/WBDomainService/GetRef_country_indicatorInCountryIdListRespons" +
                "e")]
            [WebGet()]
            IAsyncResult BeginGetRef_country_indicatorInCountryIdList(IEnumerable<int> countryIdList, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRef_country_indicatorInCountryIdList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRef_country_indicatorInCountryIdList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRef_country_indicatorInCountryIdList' operation.</returns>
            QueryResult<ref_country_indicator> EndGetRef_country_indicatorInCountryIdList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRef_country_indicatorInIndicatorIDList' operation.
            /// </summary>
            /// <param name="indicatorIdList">The value for the 'indicatorIdList' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetRef_country_indicatorInIndicatorIDListDomai" +
                "nServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetRef_country_indicatorInIndicatorIDList", ReplyAction="http://tempuri.org/WBDomainService/GetRef_country_indicatorInIndicatorIDListRespo" +
                "nse")]
            [WebGet()]
            IAsyncResult BeginGetRef_country_indicatorInIndicatorIDList(IEnumerable<int> indicatorIdList, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRef_country_indicatorInIndicatorIDList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRef_country_indicatorInIndicatorIDList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRef_country_indicatorInIndicatorIDList' operation.</returns>
            QueryResult<ref_country_indicator> EndGetRef_country_indicatorInIndicatorIDList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRef_tab_indicator' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetRef_tab_indicatorDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetRef_tab_indicator", ReplyAction="http://tempuri.org/WBDomainService/GetRef_tab_indicatorResponse")]
            [WebGet()]
            IAsyncResult BeginGetRef_tab_indicator(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRef_tab_indicator'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRef_tab_indicator'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRef_tab_indicator' operation.</returns>
            QueryResult<ref_tab_indicator> EndGetRef_tab_indicator(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTbl_countries' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetTbl_countriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetTbl_countries", ReplyAction="http://tempuri.org/WBDomainService/GetTbl_countriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetTbl_countries(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTbl_countries'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTbl_countries'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTbl_countries' operation.</returns>
            QueryResult<tbl_countries> EndGetTbl_countries(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTbl_income_levels' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetTbl_income_levelsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetTbl_income_levels", ReplyAction="http://tempuri.org/WBDomainService/GetTbl_income_levelsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTbl_income_levels(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTbl_income_levels'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTbl_income_levels'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTbl_income_levels' operation.</returns>
            QueryResult<tbl_income_levels> EndGetTbl_income_levels(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTbl_indicators' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetTbl_indicatorsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetTbl_indicators", ReplyAction="http://tempuri.org/WBDomainService/GetTbl_indicatorsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTbl_indicators(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTbl_indicators'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTbl_indicators'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTbl_indicators' operation.</returns>
            QueryResult<tbl_indicators> EndGetTbl_indicators(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTbl_indicatorsInPKList' operation.
            /// </summary>
            /// <param name="pks">The value for the 'pks' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetTbl_indicatorsInPKListDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetTbl_indicatorsInPKList", ReplyAction="http://tempuri.org/WBDomainService/GetTbl_indicatorsInPKListResponse")]
            [WebGet()]
            IAsyncResult BeginGetTbl_indicatorsInPKList(IEnumerable<int> pks, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTbl_indicatorsInPKList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTbl_indicatorsInPKList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTbl_indicatorsInPKList' operation.</returns>
            QueryResult<tbl_indicators> EndGetTbl_indicatorsInPKList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTbl_lending_types' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetTbl_lending_typesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetTbl_lending_types", ReplyAction="http://tempuri.org/WBDomainService/GetTbl_lending_typesResponse")]
            [WebGet()]
            IAsyncResult BeginGetTbl_lending_types(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTbl_lending_types'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTbl_lending_types'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTbl_lending_types' operation.</returns>
            QueryResult<tbl_lending_types> EndGetTbl_lending_types(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTbl_projects' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetTbl_projectsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetTbl_projects", ReplyAction="http://tempuri.org/WBDomainService/GetTbl_projectsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTbl_projects(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTbl_projects'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTbl_projects'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTbl_projects' operation.</returns>
            QueryResult<tbl_projects> EndGetTbl_projects(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTbl_regions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetTbl_regionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetTbl_regions", ReplyAction="http://tempuri.org/WBDomainService/GetTbl_regionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTbl_regions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTbl_regions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTbl_regions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTbl_regions' operation.</returns>
            QueryResult<tbl_regions> EndGetTbl_regions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTbl_tabs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetTbl_tabsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetTbl_tabs", ReplyAction="http://tempuri.org/WBDomainService/GetTbl_tabsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTbl_tabs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTbl_tabs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTbl_tabs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTbl_tabs' operation.</returns>
            QueryResult<tbl_tabs> EndGetTbl_tabs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTbl_trades' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetTbl_tradesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetTbl_trades", ReplyAction="http://tempuri.org/WBDomainService/GetTbl_tradesResponse")]
            [WebGet()]
            IAsyncResult BeginGetTbl_trades(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTbl_trades'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTbl_trades'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTbl_trades' operation.</returns>
            QueryResult<tbl_trades> EndGetTbl_trades(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetView_Borders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetView_BordersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetView_Borders", ReplyAction="http://tempuri.org/WBDomainService/GetView_BordersResponse")]
            [WebGet()]
            IAsyncResult BeginGetView_Borders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetView_Borders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetView_Borders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetView_Borders' operation.</returns>
            QueryResult<View_Borders> EndGetView_Borders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetView_CountryBorder' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetView_CountryBorderDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetView_CountryBorder", ReplyAction="http://tempuri.org/WBDomainService/GetView_CountryBorderResponse")]
            [WebGet()]
            IAsyncResult BeginGetView_CountryBorder(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetView_CountryBorder'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetView_CountryBorder'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetView_CountryBorder' operation.</returns>
            QueryResult<View_CountryBorder> EndGetView_CountryBorder(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetView_CountryIndicator' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetView_CountryIndicatorDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetView_CountryIndicator", ReplyAction="http://tempuri.org/WBDomainService/GetView_CountryIndicatorResponse")]
            [WebGet()]
            IAsyncResult BeginGetView_CountryIndicator(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetView_CountryIndicator'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetView_CountryIndicator'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetView_CountryIndicator' operation.</returns>
            QueryResult<View_CountryIndicator> EndGetView_CountryIndicator(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetView_CountryIndicatorTab' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetView_CountryIndicatorTabDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetView_CountryIndicatorTab", ReplyAction="http://tempuri.org/WBDomainService/GetView_CountryIndicatorTabResponse")]
            [WebGet()]
            IAsyncResult BeginGetView_CountryIndicatorTab(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetView_CountryIndicatorTab'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetView_CountryIndicatorTab'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetView_CountryIndicatorTab' operation.</returns>
            QueryResult<View_CountryIndicatorTab> EndGetView_CountryIndicatorTab(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetView_GeneralCountry' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetView_GeneralCountryDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetView_GeneralCountry", ReplyAction="http://tempuri.org/WBDomainService/GetView_GeneralCountryResponse")]
            [WebGet()]
            IAsyncResult BeginGetView_GeneralCountry(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetView_GeneralCountry'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetView_GeneralCountry'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetView_GeneralCountry' operation.</returns>
            QueryResult<View_GeneralCountry> EndGetView_GeneralCountry(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetView_TabIndicator' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/GetView_TabIndicatorDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/GetView_TabIndicator", ReplyAction="http://tempuri.org/WBDomainService/GetView_TabIndicatorResponse")]
            [WebGet()]
            IAsyncResult BeginGetView_TabIndicator(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetView_TabIndicator'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetView_TabIndicator'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetView_TabIndicator' operation.</returns>
            QueryResult<View_TabIndicator> EndGetView_TabIndicator(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WBDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WBDomainService/SubmitChanges", ReplyAction="http://tempuri.org/WBDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class WBDomainContextEntityContainer : EntityContainer
        {
            
            public WBDomainContextEntityContainer()
            {
                this.CreateEntitySet<ref_country_indicator>(EntitySetOperations.All);
                this.CreateEntitySet<ref_tab_indicator>(EntitySetOperations.None);
                this.CreateEntitySet<tbl_countries>(EntitySetOperations.None);
                this.CreateEntitySet<tbl_income_levels>(EntitySetOperations.None);
                this.CreateEntitySet<tbl_indicators>(EntitySetOperations.None);
                this.CreateEntitySet<tbl_lending_types>(EntitySetOperations.None);
                this.CreateEntitySet<tbl_projects>(EntitySetOperations.None);
                this.CreateEntitySet<tbl_regions>(EntitySetOperations.None);
                this.CreateEntitySet<tbl_tabs>(EntitySetOperations.None);
                this.CreateEntitySet<tbl_trades>(EntitySetOperations.None);
                this.CreateEntitySet<View_Borders>(EntitySetOperations.None);
                this.CreateEntitySet<View_CountryBorder>(EntitySetOperations.None);
                this.CreateEntitySet<View_CountryIndicator>(EntitySetOperations.None);
                this.CreateEntitySet<View_CountryIndicatorTab>(EntitySetOperations.None);
                this.CreateEntitySet<View_GeneralCountry>(EntitySetOperations.None);
                this.CreateEntitySet<View_TabIndicator>(EntitySetOperations.None);
            }
        }
    }
}
namespace WorldMap
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
